#include <iostream>
#include <bitset>

using namespace std;

int main() {
    setlocale(LC_ALL, "");
    int A, B, n, p, m, q;
    cout << "Введите целое число A: ";cin >> A;                                 //Запрашиваем у пользователя данные
    cout << "Введите целое число B: ";cin >> B;
    cout << "Введите n: ";cin >> n;
    cout << "Введите p: ";cin >> p;
    cout << "Введите m: ";cin >> m;
    cout << "Введите q: ";cin >> q;
    if (A > 0 && B > 0 && n > 0 && p > 0 && m > 0 && q > 0) {                   // Проверяем, что все числа и параметры положительные
        int maskB = ((1 << m) - 1) << (q);                                      // Создаем маску для числа B
        int maskA = ((1 << n) - 1) << (p - n + 1);                              // Создаем маску для числа A
        int bitsFromA = (A & maskA) >> (p - n + 1);                             // Получаем биты из числа A согласно параметрам
        B = (B & ~maskB) | (bitsFromA << q);                                    // Заменяем указанные биты в числе B
        int invertMask = ((1 << n) - 1) << (p - n + 1);                         // Создаем маску для инвертирования битов
        A ^= invertMask;                                                        // Инвертируем указанные биты в числе A
    }
    else {                                                                      // Если есть отрицательные числа или параметры, обрабатываем их
        A = abs(A);                                                             // Избавляемся от отрицательных чисел
        B = abs(B);
        n = abs(n);
        p = abs(p);
        m = abs(m);
        q = abs(q);
        int maskB = ((1 << m) - 1) << (q);                                      // Создаем маску для числа B
        int maskA = ((1 << n) - 1) << (p - n + 1);                              // Создаем маску для числа A
        int bitsFromA = (A & maskA) >> (p - n + 1);                             // Получаем биты из числа A согласно параметрам
        B = (B & ~maskB) | (bitsFromA << q);                                    // Заменяем указанные биты в числе B
        int invertMask = ((1 << n) - 1) << (p - n + 1);                         // Создаем маску для инвертирования битов
        A ^= invertMask;                                                        // Инвертируем указанные биты в числе A
    }
    cout << "Изменённое число A в двоичной системе: " << bitset<32>(A) << endl; // Выводим измененное число A в двоичной системе
    cout << "Изменённое число B в двоичной системе: " << bitset<32>(B) << endl; // Выводим измененное число B в двоичной системе
    return 0;
}